* Diagrama

#+begin_src plantuml :eval no-export :file images/class_diagram.png
  scale 1.5
  skinparam roundcorner 20
  skinparam classAttributeIconSize 12
  skinparam defaultFontSize 16
  skinparam defaultFontName Hack
  skinparam linetype ortho
  hide circle

  class "**Cliente**" as Cliente
  class "**Veiculo**" as Veiculo
  class "**Patio**" as Patio
  class "**Funcionario**" as Funcionario
  class "**Atendente**" as Atendente
  class "**HistoricoAtendimentos**" as HistoricoAtendimentos
  class "**Atendimento**" as Atendimento

  class Cliente {
        -id : string
        -nome : string
        -cpf : string
        -telefone : string
        -num_cnh : string
        -data_nasc : timestamp
        +verificar_promocoes() : string
        +verificar_pendencias() : bool
          +verificar_historico() : float
  }
  class Veiculo {
        -id : string
        -modelo : string
        -ano : string
        -categoria : int
        -alugado : bool
        -reservado : bool
  }
  class Patio {
        -qt_vagas : int
        -qt_vagas_ocupadas : int
        +adicionar_veiculo() : bool
        +remover_veiculo() : bool
        +listar_veiculos() : string
        +verificar_disp() : bool
  }
  class Funcionario {
        -nome : string
        -id : string
        -senha : string
        -telefone : string
        -cpf : string
        -inic_periodo : timestamp
        -fim_periodo : timestamp
          -bateu_ponto : bool
        +bater_ponto() : void
        +compareceu() : bool
  }
  class Atendente {
        -portal : bool
        +calcular_rendimento() : float
  }
  class HistoricoAtendimentos {
        -qt_atendimentos : int
        -valor_vendas : float
        +adicionar_atendimento() : bool
  }
  class Atendimento {
        -valor : float
        -id_atendente : string
        -id_cliente : string
        -id_veiculo : string 
        -horario_coleta : timestamp
        -horario_devolucao: timestamp
        -em_andamento : bool
        +calcular_valor() : float
  }

  Patio "1..1" o-left- "0..*" Veiculo : contém\t
  Patio .right. Funcionario : trabalha
  Funcionario <|-- Atendente
  Atendente .. Cliente : atende
  Veiculo .down. Cliente : aluga
  Atendente "1..1" *-right- "1..1" HistoricoAtendimentos : possui
  Cliente "1..1" *-right- "1..1" HistoricoAtendimentos : possui\t\t
  HistoricoAtendimentos "1..1" *-right- "0..*" Atendimento : contém\t\t
#+end_src

#+RESULTS:
[[file:images/class_diagram.png]]


* Classes
   
** Patio
   Representando o pátio de veículos da empresa, a classe tem como membro
   a variável =qt_vagas=, sendo esta a quantidade total de vagas físicas do pátio,
   definida por um /setter/ qualquer e podendo ser modificada caso ocorra a
   indisponibilidade temporária de uma vaga ou a construção de novos locais.
   Além disso, o membro =qt_vagas_ocupadas= determina as vagas ocupadas por veículos
   no momento da consulta.
   
*** Métodos
    - =adiciona_veiculo=: Adiciona um novo objeto da classe veículo adquirido pela empresa 
    - =remover_veiculo=: Caso ocorra a eventualidade da perda ou venda de um veículo,
      permite que este seja removido da lista de veículos
    - =listar_veiculos=: Lista todos os veículos presentes na estrutura lista
    - =verificar_disp=: Lista todos os veículos ainda não alugados

** Cliente
   Após registrar-se no sistema, o =Cliente= passa a "existir" no sistema,
   este é composto de um =id=, =nome= (completo), =cpf=, =telefone= para contato,
   =num_cnh= e =data_nasc= a qual pode influir sobre a checagem de promoções
   a qual ocorre no método =verificar_promocoes=. Por outro lado,
   =verificar_pendencias= baseia-se nos valores registrados no histórico de
   atendimentos. 

** Veiculo
   Um veículo com =id= único, =modelo= (/string/ informando modelo mais sua marca),
   =ano= de fabricação, =categoria= dentre as listadas no [[https://github.com/sociedade-do-pastel/vl][README]] do projeto e se
   este está =alugado= ou não. O método de =Patio=, =verificar_disp= testaria
   sobre este valor "booleano". 

** Funcionario
   Classe que representa um funcionário qualquer da empresa com =nome=, =id=, =senha=
   para acesso do sistema, =telefone= para contato, =cpf= para seu registro, =inic_periodo=
   e =fim_periodo= controlados pelo método =bater_ponto=. O sistema realiza checagens
   se tal funcionário começou seu turno atrasado. O método =compareceu= simplesmente
   verifica se este funcionário bateu ponto e está elegível para atender novos
   clientes. 
   
   
** Atendente
   Atendente, cuja superclasse é Funcionário, tem um valor =portal= que representa
   se este mantém o portal /online/ ou não. =calcular_rendimento= verifica a
   /performance/ do =Atendendente= retornando uma média de valor de suas vendas
   no mês. 

** HistoricoAtendimentos
   Existe para cada =Atendente=, este histórico lista a =qt_atendimentos=
   e =valor_vendas=, possibilitando o cálculo do desempenho do =Atendente=
   em foco rapidamente. A função =adicionar_atendimento= simplesmente
   adiciona um novo atendimento realizado por um dos atendentes relacionado
   a um =Cliente= específico. 
   
** Atendimento
   Possuindo um =valor= para o aluguel calculado pelo método =calcular_valor= e
   influenciado pela categoria do veículo e promoções calculadas para o cliente
   em questão, a classe =Atendimento= também lista o =id_veiculo= do
   veículo escolhido, bem como o =horario_coleta= pelo cliente e =horario_devolucao=,
   bem como um indicador =em_andamento=, que tem importância na determinação de
   pendências.    

